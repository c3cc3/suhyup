#include <stdio.h>
#include "parson.h"
#include <stdbool.h>
#include <libgen.h>

#include "fq_common.h"
#include "fq_linkedlist.h"
#include "fq_delimiter_list.h"
#include "fq_ratio_distribute.h"

#include "fq_codemap.h"
#include "fqueue.h"
#include "fq_file_list.h"
#include "fq_timer.h"
#include "fq_hashobj.h"
#include "fq_tci.h"
#include "fq_cache.h"
#include "fq_conf.h"
#include "fq_mem.h"
#include "fq_scanf.h"

// HISTORY_KEY|HISTORY_KEY|cache|40|string|0


typedef struct _json_tci_t json_tci_t;
struct _json_tci_t {
	char find_key[128];
	char target_key[128];
	char source[16];
	int	length;
	char datatype[16];
	char fixed[64]; // compulsary  Y/N
};

bool Load_json_make_rule( fq_logger_t *l, char *mapfile, char delimiter, linkedlist_t	*ll)
{
	file_list_obj_t *filelist_obj=NULL;
	FILELIST *this_entry=NULL;
	int rc;
	int t_no;

	rc = open_file_list(l, &filelist_obj, mapfile);
	CHECK( rc == TRUE );

	printf("count = [%d]\n", filelist_obj->count);

	// filelist_obj->on_print(filelist_obj);

	this_entry = filelist_obj->head;
	for( t_no=0;  (this_entry->next && this_entry->value); t_no++ ) {
		char *errmsg = NULL;
		printf("this_entry->value=[%s]\n", this_entry->value);

		bool tf;
		char find_key[128];
		char target_key[128];
		char source[16];
		char length_str[5];
		int	lenth;
		char data_type[16];
		char fixed[64];

		int cnt;
		cnt = fq_sscanf(delimiter, this_entry->value, "%s%s%s%s%s%s", 
			find_key, target_key, source, length_str, data_type, fixed);

		CHECK(cnt == 6);

		printf("find_key='%s', target_key='%s', source='%s', length='%s', data_type='%s' fixed='%s'.\n", 
			find_key, target_key, source, length_str, data_type, fixed);

		json_tci_t *tmp=NULL;
		tmp = (json_tci_t *)calloc(1, sizeof(json_tci_t));

		sprintf(tmp->find_key, "%s", find_key);
		sprintf(tmp->target_key, "%s", target_key);
		sprintf(tmp->source, "%s", source);
		tmp->length = atoi(length_str);
		sprintf(tmp->datatype, "%s", data_type);
		sprintf(tmp->fixed, "%s", fixed);

		ll_node_t *ll_node=NULL;
		ll_node = linkedlist_put(ll, find_key, (void *)tmp, sizeof(char)+sizeof(json_tci_t));
		CHECK(ll_node);

		// close_ratio_distributor(l, &tmp->ratio_obj);
		this_entry = this_entry->next;
	}

	if( filelist_obj ) close_file_list(l, &filelist_obj);

	printf("ll->length is [%d]\n", ll->length);

	return true;
}

bool make_json_input_sample_data( JSON_Value **json, JSON_Object **root)
{
	*json = json_value_init_object(); // make a json
	*root = json_value_get_object(*json); // get oot pointer
	
    JSON_Value *branch = json_value_init_array();
    JSON_Array *array_contents = json_value_get_array(branch);

 	json_object_set_number(*root, "SETTLE_CODE", 1); // put array to root
 	json_object_set_string(*root, "SUB_STORE_NO", "0011"); // put array to root
 	json_object_set_number(*root, "MediaCount", 3); // put array to root

	int i;
	for(i=0; i<3; i++) {
		JSON_Value *array_one = json_value_init_object();
		JSON_Object *leaf_object = json_value_get_object(array_one);

		json_object_set_number(leaf_object,"sn",i);
		json_object_set_string(leaf_object,"type","TXT");
		json_object_set_string(leaf_object,"kind","T");
		json_object_set_string(leaf_object,"path","/umsnas/contents");
		json_object_set_string(leaf_object,"filename","duc.txt");
		json_array_append_value(array_contents, array_one);
	}

 	json_object_set_value(*root, "Media", branch); // put array to root

#if 0
	printf("json_object_get_array() test\n");
	JSON_Array *in_array = json_object_get_array(*root, "Media");
	CHECK(in_array);
	printf("json_object_get_array() test ----> OK\n");
#endif

	char *dst = json_serialize_to_string_pretty(*json);
	printf("JSON: %s\n", dst);
	json_free_serialized_string(dst);

	return(true);
}

bool make_serialized_json( linkedlist_t *json_tci_ll, cache_t *cache, JSON_Object *in_json, char **dst )
{
#if 1
	JSON_Value *out_json = json_value_init_object();
	JSON_Object *root = json_value_get_object(out_json);
	JSON_Value *branch = json_value_init_array();
	JSON_Array *array_contents = json_value_get_array(branch);

#endif
	
	ll_node_t *node_p = NULL;
	
	for( node_p=json_tci_ll->head; (node_p != NULL); (node_p=node_p->next) ) {
		json_tci_t *tmp;
		tmp = (json_tci_t *) node_p->value;

#if 1
		if( strcmp( tmp->datatype, "string") == 0 ) {
			if(  strcmp( tmp->source, "json" ) == 0 ) {
				const char *p=NULL;
				p = json_object_get_string(in_json, tmp->find_key);
				if( !p ) {
					printf("'%s' not found from in_json.\n",  tmp->find_key);
					goto return_false;
				}
				json_object_set_string(root, tmp->target_key, p); // put array to root
			}
			else if(  strcmp( tmp->source, "cache" ) == 0 ) {
				const char *p=NULL;
				p = cache_getval_unlocked(cache, tmp->find_key);
				if( !p ) {
					printf("'%s' not found from cache.\n",  tmp->find_key);
					goto return_false;
				}
				json_object_set_string(root, tmp->target_key, p); // put array to root
			}
			else if(  strcmp( tmp->source, "fixed" ) == 0 ) {
				json_object_set_string(root, tmp->target_key, tmp->fixed); // put array to root
			}
			else {
				printf("[%s] -> unsupported source data.\n", tmp->source);
				return false;
			}
		}
		else if( strcmp( tmp->datatype, "number") == 0 ) {
			double d;
			if(  strcmp( tmp->source, "json" ) == 0 ) {
				d = json_object_get_number(in_json, tmp->find_key);
				json_object_set_number(root, tmp->target_key, d); // put array to root
			}
			else if(  strcmp( tmp->source, "cache" ) == 0 ) {
				char *p=NULL;
				p = cache_getval_unlocked(cache, tmp->find_key);
				if( !p ) {
					printf("'%s' not found from cache.\n",  tmp->find_key);
					goto return_false;
				}
				json_object_set_number(root, tmp->target_key, atol(p)); // put array to root
			}
			else {
				printf("[%s] -> unsupported source data.\n", tmp->source);
				goto return_false;
			}
		}
		else if( strcmp( tmp->datatype, "array") == 0 ) {
			if(  strcmp( tmp->source, "json" ) == 0 ) {

				// JSON_Array *in_array = json_object_get_array(in_json, "C0NTENTS");
				JSON_Array *in_array = json_object_get_array(in_json, (const char *)tmp->find_key);
				if( !in_array ) {
					printf("[%s] array : not found from in json.\n",  tmp->find_key);
					goto return_false;
				}
				printf("array_count is [%ld]\n", json_array_get_count(in_array));

				long i;
				for (i = 0; i < json_array_get_count(in_array); i++) {
					JSON_Value *array_new_one = json_value_init_object();
					// JSON_Object *leaf_object = json_value_get_object(array_one);

					JSON_Value *array_one = json_array_get_value(in_array, i);
#if 0
					if (json_array_add(array_contents, array_one) == JSONFailure) {
						printf("json_array_add() failed.\n");
						goto return_false;
					}
#endif
					array_new_one = json_value_deep_copy(array_one);

					CHECK(json_value_equals(array_one, array_new_one));

					JSON_Status rc;
					rc = json_array_append_value(array_contents, array_new_one);
					CHECK( rc == JSONSuccess);

					
					// json_array_append_number(array_contents, i);
				}
				// json_array_clear(in_array);
 				json_object_set_value(root, tmp->target_key, branch); // put array to root
				// json_array_clear(in_array);
				// json_value_free(branch);
			}
			else {
				printf("array: [%s] -> unsupported source data.\n", tmp->source);
				goto return_false;
			}
		}
		else {
			printf("[%s] -> unsupported data type data.\n", tmp->datatype);
			goto return_false;
		}
#endif
	}


	char *tmp=NULL;
	tmp = json_serialize_to_string_pretty(out_json);
	*dst = strdup(tmp);
	json_free_serialized_string(tmp);

	json_array_clear(array_contents);
	json_value_free(out_json);
	return true;

return_false:
	// if(out_json) json_value_free(out_json);
	return false; 

}
int main(int ac, char **av)
{
	char map_delimiter = '|';
	bool tf;
	linkedlist_t *json_tci_ll = NULL;
	char *json_tci_rule_file = av[1];
	cache_t *cache = NULL;
	int count=0;
	
	map_delimiter = '|';
	json_tci_ll =  linkedlist_new("json_tci_obj_list");
	tf = Load_json_make_rule( 0x00, json_tci_rule_file, map_delimiter, json_tci_ll);
	CHECK(tf);
	printf("JSON rule: Loading success.\n");

loop:
	JSON_Object *root;
	JSON_Value *in_json;
	
	tf = make_json_input_sample_data( &in_json, &root);
	CHECK(tf);


	/* Make cache data */
	cache= cache_new('S', "Short term cache");
	cache_update(cache, "HISTORY_KEY", "0123456789012345678901234567890123456789", 0);


	char *serialized_json_msg = NULL;
	tf = make_serialized_json( json_tci_ll, cache, root, &serialized_json_msg);
	CHECK(tf);
	
	printf("dst: %s\n", serialized_json_msg);

	SAFE_FREE(serialized_json_msg);


	cache_free(&cache);
	json_value_free(in_json);

	usleep(1000);
	count++;
	printf("[%d]-th test.\n", count);
	goto loop;

	linkedlist_free(&json_tci_ll);
	return 0;
}
